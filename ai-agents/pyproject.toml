[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "ai-powered-boutique-agents"
version = "1.0.0"
description = "AI-powered enhancement for Google Cloud Online Boutique using Python, Gemini, and intelligent agents"
readme = "README.md"
license = "Apache-2.0"
requires-python = ">=3.11"
authors = [
    { name = "GKE Turns 10 Hackathon Team" },
]
keywords = [
    "ai",
    "agents", 
    "gke",
    "kubernetes",
    "gemini",
    "mcp",
    "microservices",
    "ecommerce"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Google Cloud and AI
    "google-cloud-aiplatform>=1.38.0",
    "google-cloud-container>=2.31.0",
    "google-cloud-logging>=3.8.0",
    "google-cloud-monitoring>=2.16.0",
    "google-generativeai>=0.3.0",
    
    # Web framework and API
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Kubernetes
    "kubernetes>=28.1.0",
    
    # Agent framework
    "asyncio-mqtt>=0.16.0",
    "websockets>=12.0",
    "aiohttp>=3.9.0",
    
    # Data processing
    "pandas>=2.1.0",
    "numpy>=1.25.0",
    "scikit-learn>=1.3.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    
    # Development tools
    "watchdog>=3.0.0",  # For hot reload
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "httpx>=0.25.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.scripts]
ai-agents = "ai_agents.cli:main"
agent-dev = "ai_agents.dev.cli:dev_main"

[project.urls]
Homepage = "https://github.com/your-org/ai-powered-boutique-agents"
Documentation = "https://your-org.github.io/ai-powered-boutique-agents"
Repository = "https://github.com/your-org/ai-powered-boutique-agents"
Issues = "https://github.com/your-org/ai-powered-boutique-agents/issues"

[tool.hatch.build.targets.wheel]
packages = ["ai_agents"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["ai_agents"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "kubernetes.*",
    "google.cloud.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ai_agents"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]